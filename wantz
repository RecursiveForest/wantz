#!/usr/bin/perl

use strict;
use Getopt::Long;
use Pod::Usage;
use LWP::UserAgent;
#use Getopt::Long qw(:config bundling); # This is broken. Why?

# wantz version 2.0 - http://staticfree.info/~samuel/projects/wantz/

my $VERSION = '2.0';

my @list;
my @total;

my $errorlog = '.errorlog';
my ($verbose, @range, $list, $update, $rebuild, $help, $man, $dir);

GetOptions('verbose' => \$verbose, 'range=i{2}' => \@range, 'list' => \$list, 'update' => \$update, 'rebuild', => \$rebuild,
	'errorlog=s' => \$errorlog, 'help|?' => \$help, 'man' => \$man, 'dir=s', => \$dir) or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;


### Preliminary Setup
if ($dir) {
	print "Using directory $dir\n" if $verbose;
	chdir($dir) or (mkdir($dir) and chdir($dir));
}


### Build list of total comics
print "Building list\n" if $verbose;
my $download = LWP::UserAgent->new->get('http://www.qwantz.com/archive/list.html');
errorlog("Couldn't download 'list.html': " . $download->status_line) if $download->is_error;

foreach ($download->decoded_content) {
	push (@total, $1) while (s!\<li\>\<a href\="/archive/(\d{6})\.html" title\="(?:.+?)">(?:.+?)\</a\>\: (?:.+?)</li>!!);
}


### Build list of comics we want to download out of the list of total comics
if ($list) {
	die("wantz: Couldn't generate list, please specify proper values with --list\n") unless (@ARGV);
	foreach my $total (@total) {
		foreach my $argv (@ARGV) {
			push (@list, $total) if ($argv == $total);
		}
	}
} elsif (@range) {
	die("wantz: Couldn't generate list, please specify proper values with --range\n") unless ($range[0] < $range[1]);
	my ($lower, $upper);
	for (my $i = 0; $i <= $#total; $i++) {
		$lower = $i if ($range[0] == $total[$i]);
		$upper = $i if ($range[1] == $total[$i]);
		last if ($lower and $upper);
	}
	@list = @total[$lower .. $upper];
} elsif ($update) {
	opendir(DIR, './') or die "Can't open directory ./: $!";
	my @comics = sort { $b <=> $a } grep { /\d{6}.html/ } readdir(DIR);
	closedir(DIR);
	my $latest = shift(@comics);
	$latest = shift(@comics) if -l $latest;		# Ignore possible symlink pretending to be the latest comic
	if ($latest) {
		for (my $i = 0; $i < $#total; $i++) {
			if ($total[$i] == $latest) {
				@list = @total[$i + 1 .. $#total];
				last;
			}
		}
	} else {
		@list = @total unless $latest
	}
} else {
	die("wantz: Error: you need to specify comics to download with either --update, --range, or --list\n");
}

### Errorlog handling
open(ERRORLOG, ">>$errorlog") or die("Can't open $errorlog: $!");

sub errorlog {
	my ($message) = shift @_;
	my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime(time);
	my $date = sprintf("%4d-%02d-%02d %02d:%02d:%02d", $year+1900, $mon+1, $mday, $hour, $min, $sec);
	print ERRORLOG "$date: $message\n";
	next DENGO;
}


### Rebuild
if (!(-e 'favicon.ico') or ($rebuild)) {
	print "Fetching http://www.qwantz.com/favicon.ico\n" if $verbose;
	my $download = LWP::UserAgent->new->get('http://qwantz.com/favicon.ico', ':content_file' => 'favicon.ico');
	errorlog("Couldn't download 'favicon.ico': " . $download->status_line) if $download->is_error;
}


### Main Loop
DENGO: for (my $i = 0; $i <= $#list; $i++) {
	my $n = $list[$i];
	my ($image, $width, $height, $alt, $ml, $title);
	my $comic = sprintf("%06d", $n);

	unless ($list or ($i == $#list)) {
		my $j = $i;
		while ($n + 1 != $list[++$j]) {
			my $black = sprintf("%06d", $list[$j]);
			print "Comic $black is blacklisted. Skipping.\n" if $verbose;
			open(BLACK, ">$black.html") || outloug("Couldn't open $black.html: $!");
			print BLACK "<head><link rel='icon' href='favicon.ico'></head>\n";
			print BLACK "<center>\n";
			print BLACK "Suspiciously, comic $black doesn't actually exist. You should write Ryan North about this.<br />\n";
			print BLACK "<a href='" . sprintf("%06d", $list[$i - 1]) . ".html'>previous</a> | <a href='" . sprintf("%06d", $list[$i + 1]) . ".html'>next</a>\n";
			print BLACK "</center>";
			close(BLACK);
		}
	}

	print "Fetching http://www.qwantz.com/archive/$comic.html\n" if $verbose;
	my $download = LWP::UserAgent->new->get("http://qwantz.com/archive/$comic.html");
	errorlog("Couldn't download '$comic.html': " . $download->status_line) if $download->is_error;

	## Pull out the useful information from the comic page
	foreach ($download->decoded_content) {
		$title = $1 if (m!\<title\>qwantz\.com - (.*)\</title\>!);
		if ($ml) {
			if (m!border\="0"\>!) {
				m!(.*)" border\="0"\>!;
				$alt .= "\n$1";
				$ml = 0;
				last;
			} else {
				$alt .= "\n$_";
			}
		} else {
			next unless m!\<img src\="(http\://www\.qwantz\.com/comics/[\w\/\d.\-]+\.\w{3})" width\="(\d{3})" height\="(\d{3})" title\=!;
			$image = $1;
			$width = $2;
			$height = $3;
			if (m!border\="0"\>!) {
				m!title\="(.*)" border\="0"\>!;
				$alt = $1;
				last;
			} else {
				m!title\="(.*)!;
				$alt = $1;
				$ml = 1;
			}
		}
	}

	print "Fetching $image to $comic.png\n" if $verbose;
	my $download = LWP::UserAgent->new->get($image, ':content_file' => "$comic.png");
	errorlog("Couldn't download '$comic.png': " . $download->status_line) if $download->is_error;

	open(DINOSAUR, ">$comic.html") or errorlog("Couldn't open $comic.html: $!");
	print DINOSAUR "<head><link rel='icon' href='favicon.ico'><title>$title</title></head>\n";
	print DINOSAUR "<center>\n";
	print DINOSAUR "<img src='$comic.png' width='$width' height='$height' title='$alt' border='0' style='clear;both'><br />\n";
	print DINOSAUR "<a href='" . sprintf("%06d", $n - 1) . ".html'>previous</a> | <a href='" . sprintf("%06d", $n + 1) . ".html'>next</a>\n";
	print DINOSAUR "</center>";
	close(DINOSAUR);
}

# Add bumpers to catch links in the edge comics
my $bumper = sprintf("%06d", $list[-1] + 1);
my $last = sprintf("%06d", $list[-1]);

print "Building 000000.html\n" if $verbose;
open(ZERO, ">000000.html") || errorlog("Couldn't open 000000.html: $!");
print ZERO "<head><link rel='icon' href='favicon.ico'></head>\n";
print ZERO "<center>You've reached the beginning (or the end). Go back to <a href='$last.html'>the last one</a> or <a href='000001.html'>the first one</a>.</center>\n";
close(ZERO);

if (!(-e "$bumper.html") or ($rebuild) && $update) {
	print "Symlinking $bumper.html to 000000.html\n" if $verbose;
	symlink('000000.html', "$bumper.html");
}

if (!(-e 'index.html') or ($rebuild)) {
	print "Symlinking index.html to 000000.html\n" if $verbose;
	symlink('000000.html', 'index.html');
}

close(ERRORLOG);

__END__

=head1 NAME

wantz - download dinosaur comics from qwantz to a local directory

=head1 SYNOPSIS

wantz [-v] [-r] [-h] [-m] [-u] [--range x y] [--errorlog FILE] [--directory DIRECTORY] [--list x y z ...]

=head1 DESCRIPTION

B<wantz> will download the specified dinosaur comics from qwantz
and save them to a local directory, as well as build html files for easy
display and navigation. Saves the alt text, date, height, and width in
addition to the actual comic. The favicon.ico is also downloaded.

=head1 OPTIONS

=over 8

=item B<-h or --help>

prints a brief help message and exists

=item B<-m or --man>

displays the manpage

=item B<-v or --verbose>

toggles verbosity

=item B<-u or --update>

update to the latest dinosaur comic

=item B<--range x y>

downnload from x to y

=item B<-l or --list x y z ...>

download comics specified in the list instead of --range or --update; always the last option

=item B<-d or --dir directory>

download comics to directory 'directory' instead of ./

=item B<--rebuild>

rebuild '000000.html', 'index.html', and 'favicon.ico' if they already exist

=item B<-e or --errorlog file>

use 'file' as the errorlog; defaults to '.errorlog'

=back


=head1 USAGE

=over 8

=item B<wantz --update>

download all the dinosaur comics

=item B<wantz --verbose --range 1 1000>

verbosely download the first 1000 comics

=item B<wantz --rebuild --range 10 20 --errorlog errors>

download comics 10 through 20, rebuild 000000.html, index.html, and favicon.ico, and print errorlog to 'errors'

=item B<wantz --list 2 3 5 7 11 13 17>

download the first seven prime comics

=item B<wantz -u --dir dinosaur_comics>

download all the dinosaur comics to the directory 'dinosaur_comics'

=item B<wantz -v -r -d dinosaurs -l 1 2 4>

verbosely download 1, 2, and 4 to the directory 'dinosaurs' and rebuild

=back

=head1 VERSION

wantz version 2.0 released 2009-05-24 under the MIT/X Consortium License. See LICENSE for details.

=head1 AUTHOR

Samuel 'Shardz' Baldwin <samuel at staticfree dot info>

=cut
