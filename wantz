#!/usr/bin/perl

use strict;
use Getopt::Long;
use Pod::Usage;
use LWP::UserAgent;

# wantz version 3.0 - http://logik.li/projects/wantz/

my $VERSION = '3.0';

my @list;
my @total;

my ($verbose, @range, $list, $update, $rebuild, $help, $man, $dir);

GetOptions('verbose' => \$verbose, 'range=i{2}' => \@range, 'list' => \$list, 'update' => \$update, 'rebuild', => \$rebuild, 'help|?' => \$help, 'man' => \$man, 'dir=s', => \$dir) or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

### Preliminary Setup
if ($dir) {
	print "Using directory $dir\n" if $verbose;
	chdir($dir) or (mkdir($dir) and chdir($dir));
}

### Build list of total comics
print "Building list\n" if $verbose;
my $download = LWP::UserAgent->new->get('http://www.qwantz.com/archive.php');
print STDERR "Couldn't download 'list.html': " . $download->status_line if $download->is_error;

foreach ($download->decoded_content) {
	unshift(@total, {comic => $1, date => $2, message => $3}) while (s!<li><a href="http://www\.qwantz\.com/index\.php\?comic=(\d+)">(.+?)</a>: (.+?)</li>!!);
	#print STDERR;
}

### Build list of comics we want to download out of the list of total comics
if ($list) {
	die("$0: Couldn't generate list, please specify proper values with --list\n") unless (@ARGV);
	foreach my $total (@total) {
		foreach my $argv (@ARGV) {
			push (@list, $total) if ($argv == $total->{comic});
		}
	}
} elsif (@range) {
	die("$0: Couldn't generate list, please specify proper values with --range\n") unless ($range[0] < $range[1]);
	my ($lower, $upper);
	for (my $i = 0; $i <= $#total; $i++) {
		$lower = $i if ($range[0] == $total[$i]->{comic});
		$upper = $i if ($range[1] == $total[$i]->{comic});
		last if ($lower and $upper);
	}
	@list = @total[$lower .. $upper];
} elsif ($update) {
	opendir(DIR, './') or die "Can't open directory ./: $!";
	my @comics = sort { $b <=> $a } grep { /\d{6}.html/ } readdir(DIR);
	closedir(DIR);
	my $latest = shift(@comics);
	$latest = shift(@comics) if -l $latest;		# Ignore possible symlink pretending to be the latest comic
	if ($latest) {
		for (my $i = 0; $i < $#total; $i++) {
			if ($total[$i]->{comic} == $latest) {
				@list = @total[$i + 1 .. $#total];
				last;
			}
		}
	} else {
		@list = @total;
	}
} else {
	die("$0: Error: you need to specify comics to download with either --update, --range, or --list\n");
}

### Rebuild
if (!(-e 'favicon.ico') or ($rebuild)) {
	print "Fetching http://www.qwantz.com/favicon.ico\n" if $verbose;
	my $download = LWP::UserAgent->new->get('http://qwantz.com/favicon.ico', ':content_file' => 'favicon.ico');
	print STDERR "Couldn't download 'favicon.ico': " . $download->status_line if $download->is_error;
}


### Main Loop
for (my $i = 0; $i <= $#list; $i++) {
	my $n = $list[$i]->{comic};
	my ($image, $alt);
	my $comic = sprintf("%06d", $n);

	## Fetch comic page
	print "Fetching http://www.qwantz.com/archive/$comic.html\n" if $verbose;
	my $download = LWP::UserAgent->new->get("http://qwantz.com/archive/$comic.html");
	print STDERR "Couldn't download '$comic.html': " . $download->status_line if $download->is_error;

	## Pull out the useful information from the comic page
	foreach ($download->decoded_content) {
		next unless ($image, $alt) = m!<img src="(http://www\.qwantz\.com/comics/[\w\/\d.\-]+.\w{3})" class="comic" title="(.*?)">!s;
	}

	$alt =~ s/'/&#39;/g;	# avoid premature exit of alt-text field

	## Fetch image
	print "Fetching $image to $comic.png\n" if $verbose;
	my $download = LWP::UserAgent->new->get($image, ':content_file' => "$comic.png");
	print STDERR "Couldn't download '$comic.png': " . $download->status_line if $download->is_error;

	## Print local comic page
	unlink("$comic.html") if -l "$comic.html";
	open(DINOSAUR, ">$comic.html") or print STDERR "Couldn't open $comic.html: $!";
	print DINOSAUR "<head><link rel='icon' href='favicon.ico'><title>" . $list[$i]->{date} . "</title></head>\n";
	print DINOSAUR "<center>\n";
	print DINOSAUR "<img src='$comic.png' title='$alt' style='border: none;'><br />\n";
	print DINOSAUR $list[$i]->{message} . "<br />\n";
	print DINOSAUR "<a href='" . sprintf("%06d", $n - 1) . ".html'>previous</a> | <a href='" . sprintf("%06d", $n + 1) . ".html'>next</a>\n";
	print DINOSAUR "</center>";
	close(DINOSAUR);
	
	## Handle blacklisted comics
	unless ($list or ($i == $#list)) {
		my $j = $n;
		while (++$j != $list[$i + 1]->{comic}) {
			my $black = sprintf("%06d", $j);
			print "Comic $black is blacklisted. Skipping.\n" if $verbose;
			open(BLACK, ">$black.html") || outloug("Couldn't open $black.html: $!");
			print BLACK "<head><link rel='icon' href='favicon.ico'></head>\n";
			print BLACK "<center>\n";
			print BLACK "Suspiciously, comic $black doesn't actually exist. You should write Ryan North about this.<br />\n";
			print BLACK "<a href='" . sprintf("%06d", $j - 1) . ".html'>previous</a> | <a href='" . sprintf("%06d", $j + 1) . ".html'>next</a>\n";
			print BLACK "</center>";
			close(BLACK);
		}
	}
}

### Add bumpers to catch links in the edge comics
my $bumper = sprintf("%06d", $list[-1]->{comic} + 1);
my $last = sprintf("%06d", $list[-1]->{comic});

print "Building 000000.html\n" if $verbose;
open(ZERO, ">000000.html") || print STDERR "Couldn't open 000000.html: $!";
print ZERO "<head><link rel='icon' href='favicon.ico'></head>\n";
print ZERO "<center>You've reached the beginning (or the end). Go back to <a href='$last.html'>the last one</a> or <a href='000001.html'>the first one</a>.</center>\n";
close(ZERO);

if (!(-e "$bumper.html") or ($rebuild) && $update) {
	print "Symlinking $bumper.html to 000000.html\n" if $verbose;
	symlink('000000.html', "$bumper.html");
}

if (!(-e 'index.html') or ($rebuild)) {
	print "Symlinking index.html to 000000.html\n" if $verbose;
	symlink('000000.html', 'index.html');
}

__END__

=head1 NAME

wantz - download dinosaur comics from qwantz to a local directory

=head1 SYNOPSIS

wantz [-v] [-r] [-h] [-m] [-u] [--range x y] [--directory DIRECTORY] [--list x y z ...]

=head1 DESCRIPTION

B<wantz> will download the specified dinosaur comics from qwantz
and save them to a local directory, as well as build html files for easy
display and navigation. Saves the alt text, date, height, and width in
addition to the actual comic. The favicon.ico is also downloaded.

=head1 OPTIONS

=over 8

=item B<-h or --help>

prints a brief help message and exists

=item B<-m or --man>

displays the manpage

=item B<-v or --verbose>

toggles verbosity

=item B<-u or --update>

update to the latest dinosaur comic

=item B<--range x y>

downnload from x to y

=item B<-l or --list x y z ...>

download comics specified in the list instead of --range or --update; always the last option

=item B<-d or --dir directory>

download comics to directory 'directory' instead of ./

=item B<--rebuild>

rebuild '000000.html', 'index.html', and 'favicon.ico' if they already exist

=back


=head1 USAGE

=over 8

=item B<wantz --update>

download all the dinosaur comics

=item B<wantz --verbose --range 1 1000>

verbosely download the first 1000 comics

=item B<wantz --rebuild --range 10 20>

download comics 10 through 20, rebuild 000000.html, index.html, and favicon.ico

=item B<wantz --list 2 3 5 7 11 13 17>

download the first seven prime comics

=item B<wantz -u --dir dinosaur_comics>

download all the dinosaur comics to the directory 'dinosaur_comics'

=item B<wantz -v -r -d dinosaurs -l 1 2 4>

verbosely download 1, 2, and 4 to the directory 'dinosaurs' and rebuild

=back

=head1 VERSION

wantz version 3.0 released 2009-08-07 under the MIT/X Consortium License. See LICENSE for details.

=head1 AUTHOR

Samuel Baldwin <recursive 'dot' forest 'at' gmail 'dot' com>

=cut
